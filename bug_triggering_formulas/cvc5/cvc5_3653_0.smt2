(declare-fun a () Bool)
(declare-fun q (Int) Int)
(declare-fun f (Int) Int)
(declare-fun r () Int)
(declare-fun c () Bool)
(declare-fun aa () Bool)
(declare-fun o () (Array Int Int))
(declare-fun p () Int)
(declare-fun n () Int)
(declare-fun m () Int)
(declare-fun j () Bool)
(declare-fun i () Int)
(declare-fun e () Int)
(declare-fun k () (Array Int Int))
(declare-fun l () Int)
(declare-fun s () Bool)
(declare-fun b () Int)
(declare-fun g (Int Int Int) Int)
(declare-fun h (Int) Int)
(declare-fun d (Int) Int)
(assert (let ((a!1 (ite aa true (ite c (ite (= r 1) true (= r 2)) false)))(a!3 (ite a 0 (ite (= (f 0) 0) 0 (q 0))))(a!5 (ite (ite a (= b 3) false) (store (ite s (store k l m) k) 0 0) (ite s (store k l m) k)))(a!7 (ite (ite (= (f 0) 0) true (= (f 0) 3)) 0 (g (h (f 0)) 0 0)))(a!9 (ite (distinct i 0) (store (ite (distinct n 0) (store o n p) o) i (ite j 0 m)) (ite (distinct n 0) (store o n p) o)))(a!13 (ite a 0 (ite a 0 (ite a 0 (ite a 5 6)))))) (let ((a!2 (ite a (ite a (ite a a!1 true) true) true))(a!4 (ite (ite (not a) (ite (= r 0) a false) false) a!1 true))(a!6 (ite (ite (not a) (= r 3) false) (store a!5 0 0) a!5))) (let ((a!8 (ite (ite (not (ite a true a!4)) (= (f 0) 3) false) (store a!6 a!7 0) a!6))(a!14 (ite (ite (not a) (ite (not a!2) (= a!3 0) false) false) 7 a!13))) (let ((a!10 (ite (= a!3 0) (ite (not a) (select a!8 0) 0) (select (ite (distinct e 0) (store a!9 e 0) a!9) 0)))) (let ((a!11 (ite (= (d 0) 0) 0 (ite (= 0 (d 0)) 0 a!10)))) (let ((a!12 (ite (not (ite a a!2 true)) (ite (= (f 0) 2) (= a!11 0) false) false))) (distinct (ite a!12 0 a!14) 0))))))))
(check-sat)
